section typeSymbols:

  agent, text, symmetric_key, public_key, function,  
  message, fact, nat, protocol_id, bool, set

section signature:

   message > agent         
   message > text         
   message > symmetric_key 
   message > public_key    
   message > function      
   message > nat         
   message > protocol_id
   message > bool

  pair     : message * message -> message
  crypt    : message * message -> message
  inv      : message -> message
  scrypt   : message * message -> message
  exp      : message * message -> message
  xor      : message * message -> message
  apply    : message * message -> message
  func     : public_key * text -> text 

  iknows   : message -> fact
  contains : message * set -> fact
  witness  : agent * agent * protocol_id * message  -> fact
  request  : agent * agent * protocol_id * message * nat -> fact
  wrequest : agent * agent * protocol_id * message * nat -> fact
  secret   : message * protocol_id * set(agent) -> fact

section types:

  true, false: bool
  PreludeK,PreludeM,PreludeM1,PreludeM2,PreludeM3 : message

section equations:
  
  pair(PreludeM1,pair(PreludeM2,PreludeM3)) = pair(pair(PreludeM1,PreludeM2),PreludeM3)

  inv(inv(PreludeM)) = PreludeM
  
  exp(exp(PreludeM1,PreludeM2),PreludeM3) = exp(exp(PreludeM1,PreludeM3),PreludeM2)
  exp(exp(PreludeM1,PreludeM2),inv(PreludeM2)) = PreludeM1

  xor(PreludeM1,xor(PreludeM2,PreludeM3)) = xor(xor(PreludeM1,PreludeM2),PreludeM3)
  xor(PreludeM1,PreludeM2) = xor(PreludeM2,PreludeM1)
  xor(xor(PreludeM1,PreludeM1),PreludeM2) = PreludeM2


section intruder:

  % generate rules

  step gen_pair (PreludeM1,PreludeM2) :=
    iknows(PreludeM1).iknows(PreludeM2) => iknows(pair(PreludeM1,PreludeM2))
  step gen_crypt (PreludeM1,PreludeM2) :=
    iknows(PreludeM1).iknows(PreludeM2) => iknows(crypt(PreludeM1,PreludeM2))
  step gen_scrypt (PreludeM1,PreludeM2) :=
    iknows(PreludeM1).iknows(PreludeM2) => iknows(scrypt(PreludeM1,PreludeM2))
  step gen_exp (PreludeM1,PreludeM2) :=
    iknows(PreludeM1).iknows(PreludeM2) => iknows(exp(PreludeM1,PreludeM2))
  step gen_xor (PreludeM1,PreludeM2) :=
    iknows(PreludeM1).iknows(PreludeM2) => iknows(xor(PreludeM1,PreludeM2))
  step gen_apply (PreludeM1,PreludeM2) :=
    iknows(PreludeM1).iknows(PreludeM2) => iknows(apply(PreludeM1,PreludeM2))

  % analysis rules
 
  step ana_pair (PreludeM1,PreludeM2) :=
    iknows(pair(PreludeM1,PreludeM2)) => iknows(PreludeM1).iknows(PreludeM2)
  step ana_crypt (PreludeK,PreludeM) :=
    iknows(crypt(PreludeK,PreludeM)).iknows(inv(PreludeK)) => iknows(PreludeM)
  step ana_scrypt (PreludeK,PreludeM) :=
    iknows(scrypt(PreludeK,PreludeM)).iknows(PreludeK) => iknows(PreludeM)

  % Generating new constants of any type:

  step generate (PreludeM) :=
    =[exists PreludeM]=> iknows(PreludeM)





