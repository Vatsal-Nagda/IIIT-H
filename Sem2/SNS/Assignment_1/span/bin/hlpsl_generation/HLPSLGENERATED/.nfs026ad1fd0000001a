role role_A(A:agent,B:agent,Tab:agent -> public_key,SND,RCV:channel(dy))
played_by A
def=
	 local
		Na:text,Nb:text,State:nat
	init
		State := 0
	transition
		 0. State=0 /\ RCV(start) =|> State':=1 /\ Na':=new() /\ SND({Na'}_Tab(B))
		 1. State=1 /\ RCV({Na.Nb'}_Tab(A)) =|> State':=2 /\ SND({Nb'}_Tab(B))
end role

role role_B(A:agent,B:agent,Tab:agent -> public_key,SND,RCV:channel(dy))
played_by B
def=
	 local
		Na:text,Nb:text,State:nat
	init
		State := 0
	transition
		 0. State=0 /\ RCV({Na'}_Tab(B)) =|> State':=1 /\ Nb':=new() /\ SND({Na'.Nb'}_Tab(A))
		 1. State=1 /\ RCV({Nb}_Tab(B)) =|> State':=2
end role


role session_1(A:agent,B:agent,Tab:agent -> public_key)
def=
	local
		RCV1,SND1, RCV2,SND2 : channel(dy)
	composition
		role_A(A,B,Tab,RCV1,SND1) /\ role_B(A,B,Tab,RCV2,SND2)
end role

role environment()
def=
	const
		bob:agent, id:protocol_id, alice:agent, tab:agent -> public_key
	intruder_knowledge = {}
	composition
		session_1(alice, bob, tab)
end role

goal
	secrecy_of id
end goal

 environment()