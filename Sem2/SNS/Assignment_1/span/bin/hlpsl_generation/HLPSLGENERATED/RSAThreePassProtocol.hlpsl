role role_A(A:agent,B:agent,Ka:symmetric_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Kb:symmetric_key,M:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ M':=new() /\ witness(A,B,auth_1,M') /\ SND({M'}_Ka)
		2. State=1 /\ RCV({{M}_Ka}_Kb') =|> State':=2 /\ SND({M}_Kb')
end role

role role_B(A:agent,B:agent,Kb:symmetric_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Ka:symmetric_key,M:text
	init
		State := 0
	transition
		1. State=0 /\ RCV({M'}_Ka') =|> State':=1 /\ request(B,A,auth_1,M') /\ SND({{M'}_Ka'}_Kb)
		3. State=1 /\ RCV({M}_Kb) =|> State':=2
end role

role session1(Ka:symmetric_key,A:agent,B:agent,Kb:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,Kb,SND2,RCV2) /\ role_A(A,B,Ka,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,bob:agent,key1:symmetric_key,alice:agent,key2:symmetric_key,auth_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(key1,alice,bob,key2)
end role

goal
	authentication_on auth_1
end goal

environment()