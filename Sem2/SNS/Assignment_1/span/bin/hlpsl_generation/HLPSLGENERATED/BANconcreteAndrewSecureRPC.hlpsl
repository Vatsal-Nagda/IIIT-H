role role_A(A:agent,B:agent,Kab:symmetric_key,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Kab2:symmetric_key,Na:text,Nb:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Na':=new() /\ SND(A.Na')
		2. State=1 /\ RCV({Na.Kab2'}_Kab) =|> State':=2 /\ secret(Kab2',sec_1,{}) /\ SND({Na}_Kab2')
		4. State=2 /\ RCV(Nb') =|> State':=3
end role

role role_B(A:agent,B:agent,Kab:symmetric_key,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Kab2:symmetric_key,Na:text,Nb:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(A.Na') =|> State':=1 /\ Kab2':=new() /\ secret(Kab2',sec_1,{}) /\ SND({Na'.Kab2'}_Kab)
		3. State=1 /\ RCV({Na}_Kab2) =|> State':=2 /\ secret(Kab2',sec_1,{}) /\ Nb':=new() /\ SND(Nb')
end role

role session1(A:agent,B:agent,Kab:symmetric_key)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,Kab,SND2,RCV2) /\ role_A(A,B,Kab,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,bob:agent,alice:agent,key:symmetric_key,sec_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(alice,bob,key)
end role

goal
	secrecy_of sec_1
end goal

environment()