role role_A(A:agent,B:agent,S:agent,Kas:symmetric_key,Succ:function,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Ta:text,Kab:symmetric_key,Nb:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Kab':=new() /\ secret(Kab',sec_1,{}) /\ Ta':=new() /\ SND(A.{Ta'.B.Kab'}_Kas)
		3. State=1 /\ RCV({Nb'}_Kab) =|> State':=2 /\ secret(Kab',sec_1,{}) /\ SND({Succ(Nb')}_Kab)
end role

role role_B(A:agent,B:agent,S:agent,Kbs:symmetric_key,Succ:function,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Ts:text,Kab:symmetric_key,Nb:text
	init
		State := 0
	transition
		2. State=0 /\ RCV({Ts'.A.Kab'}_Kbs) =|> State':=1 /\ secret(Kab',sec_1,{}) /\ Nb':=new() /\ SND({Nb'}_Kab')
		4. State=1 /\ RCV({Succ(Nb)}_Kab) =|> State':=2 /\ secret(Kab',sec_1,{})
end role

role role_S(A:agent,B:agent,S:agent,Kas:symmetric_key,Kbs:symmetric_key,Succ:function,SND,RCV:channel(dy))
played_by S
def=
	local
		State:nat,Ta:text,Ts:text,Kab:symmetric_key
	init
		State := 0
	transition
		1. State=0 /\ RCV(A.{Ta'.B.Kab'}_Kas) =|> State':=1 /\ secret(Kab',sec_1,{}) /\ Ts':=new() /\ SND({Ts'.A.Kab'}_Kbs)
end role

role session1(A:agent,B:agent,S:agent,Kas:symmetric_key,Kbs:symmetric_key,Succ:function)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_S(A,B,S,Kas,Kbs,Succ,SND3,RCV3) /\ role_B(A,B,S,Kbs,Succ,SND2,RCV2) /\ role_A(A,B,S,Kas,Succ,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,key2:symmetric_key,server:agent,alice:agent,bob:agent,key1:symmetric_key,succ:function,sec_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(alice,bob,server,key1,key2,succ)
end role

goal
	secrecy_of sec_1
end goal

environment()