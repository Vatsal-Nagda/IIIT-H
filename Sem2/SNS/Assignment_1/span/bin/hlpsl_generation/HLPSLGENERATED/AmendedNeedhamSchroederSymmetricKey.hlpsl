role role_A(A:agent,B:agent,S:agent,Kas:symmetric_key,Dec:function,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Na:text,Kbs:symmetric_key,Kab:symmetric_key,Nb:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ SND(A)
		2. State=1 /\ RCV({A.Nb'}_Kbs') =|> State':=2 /\ Na':=new() /\ SND(A.B.Na'.{A.Nb'}_Kbs')
		4. State=2 /\ RCV({Na.B.Kab'.{Kab'.Nb.A}_Kbs}_Kas) =|> State':=3 /\ secret(Kab',sec_1,{}) /\ SND({Kab'.Nb.A}_Kbs)
		6. State=3 /\ RCV({Nb}_Kab) =|> State':=4 /\ secret(Kab',sec_1,{}) /\ SND({Dec(Nb)}_Kab)
end role

role role_B(A:agent,B:agent,S:agent,Kbs:symmetric_key,Dec:function,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Kab:symmetric_key,Nb:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(A) =|> State':=1 /\ Nb':=new() /\ SND({A.Nb'}_Kbs)
		5. State=1 /\ RCV({Kab'.Nb.A}_Kbs) =|> State':=2 /\ secret(Kab',sec_1,{}) /\ SND({Nb}_Kab')
		7. State=2 /\ RCV({Dec(Nb)}_Kab) =|> State':=3 /\ secret(Kab',sec_1,{})
end role

role role_S(A:agent,B:agent,S:agent,Kas:symmetric_key,Kbs:symmetric_key,Dec:function,SND,RCV:channel(dy))
played_by S
def=
	local
		State:nat,Na:text,Kab:symmetric_key,Nb:text
	init
		State := 0
	transition
		3. State=0 /\ RCV(A.B.Na'.{A.Nb'}_Kbs) =|> State':=1 /\ Kab':=new() /\ secret(Kab',sec_1,{}) /\ SND({Na'.B.Kab'.{Kab'.Nb'.A}_Kbs}_Kas)
end role

role session1(A:agent,B:agent,S:agent,Kas:symmetric_key,Kbs:symmetric_key,Dec:function)
def=
	local
		SND3,RCV3,SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_S(A,B,S,Kas,Kbs,Dec,SND3,RCV3) /\ role_B(A,B,S,Kbs,Dec,SND2,RCV2) /\ role_A(A,B,S,Kas,Dec,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,key2:symmetric_key,server:agent,alice:agent,bob:agent,key1:symmetric_key,dec:function,sec_1:protocol_id
	intruder_knowledge = {}
	composition
		session1(alice,bob,server,key1,key2,dec)
end role

goal
	secrecy_of sec_1
end goal

environment()