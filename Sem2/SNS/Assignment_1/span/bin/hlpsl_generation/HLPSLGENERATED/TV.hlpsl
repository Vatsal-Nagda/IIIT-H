role role_C(C:agent,K:agent->public_key,D:agent,SND,RCV:channel(dy))
played_by C
def=
	local
		State:nat,Ins:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(C.K(C)) =|> State':=1 /\ Ins':=new() /\ witness(C,D,auth_1,Ins') /\ SND(C.D.{Ins'}_K)
end role

role role_D(D:agent,K:agent->public_key,SND,RCV:channel(dy))
played_by D
def=
	local
		State:nat,Ins:text,C:agent
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ C':=new() /\ SND(C'.K(C'))
		2. State=1 /\ RCV(C.D.{Ins'}_K) =|> State':=2 /\ request(D,C,auth_1,Ins')
end role

role session1(C:agent,K:agent->public_key,D:agent)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_C(C,K,D,SND2,RCV2) /\ role_D(D,K,SND1,RCV1)
end role

role environment()
def=
	const
		hash_0:function,scard:agent,key:agent->public_key,auth_1:protocol_id
	intruder_knowledge = {scard,key,i}
	composition
		session1(scard,key,i)
end role

goal
	authentication_on auth_1
end goal

environment()