role role_A(A:agent,B:agent,Kab:symmetric_key,Incr:function,SND,RCV:channel(dy))
played_by A
def=
	local
		State:nat,Nb:text,Nb2:text,Kab2:symmetric_key,Na:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(start) =|> State':=1 /\ Na':=new() /\ SND(A.{Na'}_Kab)
		2. State=1 /\ RCV({Incr(Na).Nb'}_Kab) =|> State':=2 /\ SND({Incr(Nb')}_Kab)
		4. State=2 /\ RCV({Kab2'.Nb2'.Na}_Kab) =|> State':=3 /\ secret(Kab2',sec1,{})
end role

role role_B(A:agent,B:agent,Kab:symmetric_key,Incr:function,SND,RCV:channel(dy))
played_by B
def=
	local
		State:nat,Nb:text,Nb2:text,Kab2:symmetric_key,Na:text
	init
		State := 0
	transition
		1. State=0 /\ RCV(A.{Na'}_Kab) =|> State':=1 /\ Nb':=new() /\ SND({Incr(Na').Nb'}_Kab)
		3. State=1 /\ RCV({Incr(Nb)}_Kab) =|> State':=2 /\ Nb2':=new() /\ Kab2':=new() /\ secret(Kab2',sec1,{}) /\ SND({Kab2'.Nb2'.Na}_Kab)
end role

role session1(A:agent,B:agent,Kab:symmetric_key,Incr:function)
def=
	local
		SND2,RCV2,SND1,RCV1:channel(dy)
	composition
		role_B(A,B,Kab,Incr,SND2,RCV2) /\ role_A(A,B,Kab,Incr,SND1,RCV1)
end role

role environment()
def=
	const
		h:function,key:symmetric_key,alice:agent,bob:agent,incr:function,sec1:protocol_id
	intruder_knowledge = {}
	composition
		session1(alice,bob,key,incr)
end role

goal
	secrecy_of sec1
end goal

environment()